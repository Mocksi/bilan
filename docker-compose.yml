version: '3.8'

services:
  # Bilan Server with SQLite (default for development)
  bilan-server:
    build: .
    ports:
      - "3002:3002"
    environment:
      - BILAN_NODE_ENV=development
      - BILAN_PORT=3002
      - BILAN_DB_PATH=/app/data/bilan.db
      # v0.4.1: Authentication configuration
      - BILAN_DEV_MODE=true  # Allow running without API key in development
      # Uncomment and set for production deployment:
      # - BILAN_API_KEY=your-secure-api-key-here
      # CORS configuration
      - BILAN_CORS_ORIGIN="http://localhost:3002,http://localhost:3004"
      - BILAN_CORS_CREDENTIALS=true
      # Debug configuration
      - BILAN_DEBUG=true
      - BILAN_LOG_LEVEL=info
    volumes:
      - bilan-data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3002/health').then(() => process.exit(0)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Bilan Dashboard (for local development)
  # TODO: Add dashboard Docker build when needed
  # bilan-dashboard:
  #   build:
  #     context: .
  #     dockerfile: packages/dashboard/Dockerfile
  #   ports:
  #     - "3004:3004"
  #   environment:
  #     - NEXT_PUBLIC_API_BASE_URL=http://localhost:3002
  #     - NODE_ENV=development
  #     # v0.4.1: Dashboard authentication
  #     # - NEXT_PUBLIC_BILAN_API_KEY=your-secure-api-key-here  # Must match BILAN_API_KEY
  #   depends_on:
  #     - bilan-server
  #   restart: unless-stopped

  # PostgreSQL Database (alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=bilan
      - POSTGRES_USER=bilan
      - POSTGRES_PASSWORD=bilan_password
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bilan -d bilan"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for future caching if needed)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  bilan-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  default:
    name: bilan-network 