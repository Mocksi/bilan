name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Build packages
        run: npm run build
        
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Update package versions
        run: |
          echo "Updating to version ${{ steps.version.outputs.VERSION }}"
          npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          cd packages/sdk && npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          cd ../server && npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          cd ../dashboard && npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
          
      - name: Create SDK package for release
        run: |
          cd packages/sdk
          npm pack
          
      - name: Publish SDK to NPM
        run: |
          cd packages/sdk
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          echo "## Changes in v${{ steps.version.outputs.VERSION }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Commits since $LAST_TAG:" >> CHANGELOG.md
            git log --oneline $LAST_TAG..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "### Initial release" >> CHANGELOG.md
            echo "- First release of Bilan SDK" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Package Information" >> CHANGELOG.md
          echo "- **SDK Bundle Size**: $(cd packages/sdk && du -h dist/index.js | cut -f1)" >> CHANGELOG.md
          echo "- **SDK Gzipped Size**: $(cd packages/sdk && gzip -c dist/index.js | wc -c | awk '{print $1/1024 " KB"}')" >> CHANGELOG.md
          
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          
      - name: Upload SDK package as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: packages/sdk/bilan-sdk-${{ steps.version.outputs.VERSION }}.tgz
          asset_name: bilan-sdk-${{ steps.version.outputs.VERSION }}.tgz
          asset_content_type: application/gzip

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "‚úÖ Release v${{ needs.release.outputs.version }} published successfully!"
          echo "üì¶ SDK available at: https://www.npmjs.com/package/@bilan/sdk"
          
      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed! Check the logs for details."
          exit 1 